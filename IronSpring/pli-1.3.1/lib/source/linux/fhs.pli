 /* _pli_FHS                                                         */
 /********************************************************************/
 /*           Iron Spring PL/I Runtime Library Version 0.5           */
 /*              Distributed under the Gnu LGPL License              */
 /*                                                                  */
 /*      Module:        FHS     (PL/I runtime)                       */
 /*      Version:       1.0                                          */
 /*      Date:          Jul, 2003                                    */
 /*      Author:        Peter Flass                                  */
 /*                                                                  */
 /*      Entry Points:  _pli_FHS Free heap storage.                  */
 /*                                                                  */
 /*      Function:      Heap storage free.                           */
 /*                                                                  */
 /*      Dependencies:                                               */
 /*			Linux: This version uses the integrated PL/I */
 /*			heap management (dlfree).  Another version   */
 /*			for callers linked with libc uses free().    */
 /*                                                                  */
 /*      Calling sequence:                                           */
 /*                     The address of the storage to be freed is    */
 /*                     passed on the stack. The storage is freed    */
 /*                     and control is returned to the caller.       */
 /*                                                                  */
 /*                     Additional processing for CONTROLLED storage */
 /*                     is done elsewhere.                           */
 /*                                                                  */
 /*      Called From:   Compiled code via PGT.                       */
 /*                                                                  */
 /*      To Do:                                                      */
 /*                   . It would be nice if handling of AREAs was    */
 /*                     integrated with handling the default heap.   */
 /*                     On the other hand, AREAs have some require-  */
 /*                     ments not found in the heap (Read/Write of   */
 /*                     entire areas, e.g.) and OS/2 provides a nice */
 /*                     simple, presumably fast API for handling     */
 /*                     heaps that it's a shame not to use.          */
 /*                                                                  */
 /*      Modifications:                                              */
 /*                                                                  */
 /********************************************************************/

 FHS: proc(pBlk)
      external( '_pli_FHS' )
      options( linkage(system) );

 /*-------------------------*/
 /* Parameters              */
 /*-------------------------*/
 dcl     pBlk                ptr;                     /* -> Block    */

 /*-------------------------*/
 /* Automatic Data          */
 /*-------------------------*/
 dcl      pDSA                ptr;                            /*DEBUG*/
 
 /*-------------------------*/
 /* External Entries        */
 /*-------------------------*/
 dcl      free   	     entry( ptr )
			     ext( '_pli_free' );
 dcl     GetDSA              entry                            /*DEBUG*/
                             external( '_pli_GetDSA' )        /*DEBUG*/
                             returns( ptr )                   /*DEBUG*/
                             options( LINKAGE(SYSTEM) );      /*DEBUG*/

/* Code to debug particularly nasty problem to figure out who   DEBUG*/
/* called free() causing a trap in _pli_free                    DEBUG*/
/* pDSA = GetDSA();                     /* pDSA->My EBP         DEBUG*/
/* pDSA = pDSA - stg( sysnull()->dsa_below_ebp );             /*DEBUG*/
/* display('Freeing '||heximage(addr(pBlk),4) ||              /*DEBUG*/
/*         ' Caller  '||heximage(addr(pDSA->dsa_eip),4));     /*DEBUG*/

 call free(pBlk);	     /* Free the memory block		     */
 return;                     /* No data returned                     */


 %include dsa;

 end FHS;
